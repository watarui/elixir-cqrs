# マルチステージビルド用Dockerfile

# ビルドステージ
FROM elixir:1.18-alpine AS build

# ビルドに必要なパッケージをインストール
RUN apk add --no-cache build-base git

# HEXとRebarをインストール
RUN mix local.hex --force && \
    mix local.rebar --force

# 作業ディレクトリを設定
WORKDIR /app

# 環境変数の設定
ENV MIX_ENV=prod

# 依存関係ファイルをコピー
COPY mix.exs mix.lock ./
COPY apps/query_service/mix.exs ./apps/query_service/
COPY apps/shared/mix.exs ./apps/shared/

# 依存関係をダウンロード
RUN mix deps.get --only prod
RUN mix deps.compile

# アプリケーションのソースコードをコピー
COPY . .

# アプリケーションをコンパイル
RUN mix compile

# リリースをビルド
RUN mix release query_service

# ランタイムステージ
FROM alpine:3.19 AS runtime

# ランタイムに必要なパッケージをインストール
RUN apk add --no-cache openssl ncurses-libs libstdc++ libgcc

# アプリケーション用のユーザーを作成
RUN addgroup -g 1000 app && \
    adduser -u 1000 -G app -s /bin/sh -D app

WORKDIR /app

# ビルドステージからリリースをコピー
COPY --from=build --chown=app:app /app/_build/prod/rel/query_service ./

# 環境変数の設定
ENV HOME=/app
ENV MIX_ENV=prod
ENV PORT=50052
ENV LANG=C.UTF-8

# アプリケーションユーザーに切り替え
USER app

# ポートを公開
EXPOSE 50052

# ヘルスチェック
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
  CMD /app/bin/query_service rpc "System.halt(0)" || exit 1

# アプリケーションを起動
CMD ["/app/bin/query_service", "start"]