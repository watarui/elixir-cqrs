name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  ELIXIR_VERSION: "1.18.1"
  OTP_VERSION: "27.2"
  POSTGRES_VERSION: "16"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: event_store_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Check code format
        run: mix format --check-formatted

      - name: Run credo
        run: mix credo --strict

      - name: Run dialyzer
        run: mix dialyzer

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/event_store_test
          MIX_ENV: test
        run: |
          mix ecto.create
          mix ecto.migrate
          mix test

      - name: Generate test coverage report
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/event_store_test
          MIX_ENV: test
        run: mix coveralls.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./cover/excoveralls.json

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        service: [client_service, command_service, query_service]
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Kubernetes manifests
        run: |
          mkdir -p k8s/generated
          for service in client_service command_service query_service; do
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:main-${GITHUB_SHA::8}"
            sed "s|IMAGE_PLACEHOLDER|${IMAGE_TAG}|g" k8s/base/${service}-deployment.yaml > k8s/generated/${service}-deployment.yaml
          done

      - name: Commit generated manifests
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add k8s/generated/
          git commit -m "Update Kubernetes manifests for ${GITHUB_SHA::8}" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Trigger ArgoCD sync
        run: |
          curl -X POST https://argocd.example.com/api/v1/applications/elixir-cqrs/sync \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            -H "Content-Type: application/json"