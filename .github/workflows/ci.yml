name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  ELIXIR_VERSION: '1.18.4'
  OTP_VERSION: '27.0'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
    
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Check formatting
      run: mix format --check-formatted
    
    - name: Run credo
      run: mix credo --strict --min-priority high
    
    - name: Setup test databases
      env:
        MIX_ENV: test
        PGPASSWORD: postgres
        DATABASE_URL: ecto://postgres:postgres@localhost:5432/test_db
      run: |
        # Create event store database
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE event_store_test;" || true
        # Create regular test databases
        mix ecto.create
        mix ecto.migrate
    
    - name: Run tests
      env:
        MIX_ENV: test
        DATABASE_URL: ecto://postgres:postgres@localhost:5432/test_db
        EVENT_STORE_DB_HOST: localhost
        EVENT_STORE_DB_USER: postgres
        EVENT_STORE_DB_PASSWORD: postgres
        EVENT_STORE_DB_NAME: event_store_test
        EVENT_STORE_DB_PORT: 5432
      run: mix test
    
    - name: Run dialyzer
      run: mix dialyzer
      continue-on-error: true

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        include:
          - service: client_service
            image_name: client-service
          - service: command_service
            image_name: command-service
          - service: query_service
            image_name: query-service
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.image_name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/${{ matrix.service }}/Dockerfile.multi
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # ここでKubernetesへのデプロイやArgoCDのトリガーを実行
        # kubectl apply -f k8s/staging/
        # または ArgoCD CLI を使用してアプリケーションを同期

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version
      id: version
      run: |
        VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'release:\s*\K[0-9]+\.[0-9]+\.[0-9]+')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## Changes in this Release
          ${{ github.event.head_commit.message }}
          
          ## Docker Images
          - `ghcr.io/${{ github.repository }}/client-service:v${{ steps.version.outputs.version }}`
          - `ghcr.io/${{ github.repository }}/command-service:v${{ steps.version.outputs.version }}`
          - `ghcr.io/${{ github.repository }}/query-service:v${{ steps.version.outputs.version }}`
        draft: false
        prerelease: false