services:
  # PostgreSQL - Event Store
  postgres-event-store:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: elixir_cqrs_event_store_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres-event-store-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elixir-cqrs-network

  # PostgreSQL - Command Service
  postgres-command:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: elixir_cqrs_command_dev
    ports:
      - "5433:5432"
    volumes:
      - postgres-command-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elixir-cqrs-network

  # PostgreSQL - Query Service
  postgres-query:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: elixir_cqrs_query_dev
    ports:
      - "5434:5432"
    volumes:
      - postgres-query-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elixir-cqrs-network

  # Jaeger - 分散トレーシング
  jaeger:
    image: jaegertracing/all-in-one:1.53
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    networks:
      - elixir-cqrs-network

  # Prometheus - メトリクス収集
  prometheus:
    image: prom/prometheus:v2.48.1
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - elixir-cqrs-network

  # Grafana - ダッシュボード
  grafana:
    image: grafana/grafana:10.2.3
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - elixir-cqrs-network

  # Monitor Dashboard (Frontend)
  monitor-dashboard:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_GRAPHQL_ENDPOINT=http://host.docker.internal:4000/graphql
      - NEXT_PUBLIC_WS_ENDPOINT=ws://host.docker.internal:4000/graphql
      - EVENT_STORE_DB_URL=postgresql://postgres:postgres@postgres-event-store:5432/elixir_cqrs_event_store_dev
      - COMMAND_DB_URL=postgresql://postgres:postgres@postgres-command:5433/elixir_cqrs_command_dev
      - QUERY_DB_URL=postgresql://postgres:postgres@postgres-query:5434/elixir_cqrs_query_dev
    ports:
      - "4001:4001"
    depends_on:
      - postgres-event-store
      - postgres-command
      - postgres-query
    networks:
      - elixir-cqrs-network

  # pgweb - Event Store DB用
  pgweb-event-store:
    image: sosedoff/pgweb:latest
    environment:
      PGWEB_DATABASE_URL: postgresql://postgres:postgres@postgres-event-store:5432/elixir_cqrs_event_store_dev?sslmode=disable
    ports:
      - "5050:8081"
    depends_on:
      - postgres-event-store
    networks:
      - elixir-cqrs-network
    command: pgweb --bind=0.0.0.0 --listen=8081

  # pgweb - Command DB用
  pgweb-command:
    image: sosedoff/pgweb:latest
    environment:
      PGWEB_DATABASE_URL: postgresql://postgres:postgres@postgres-command:5432/elixir_cqrs_command_dev?sslmode=disable
    ports:
      - "5051:8081"
    depends_on:
      - postgres-command
    networks:
      - elixir-cqrs-network
    command: pgweb --bind=0.0.0.0 --listen=8081

  # pgweb - Query DB用
  pgweb-query:
    image: sosedoff/pgweb:latest
    environment:
      PGWEB_DATABASE_URL: postgresql://postgres:postgres@postgres-query:5432/elixir_cqrs_query_dev?sslmode=disable
    ports:
      - "5052:8081"
    depends_on:
      - postgres-query
    networks:
      - elixir-cqrs-network
    command: pgweb --bind=0.0.0.0 --listen=8081

volumes:
  postgres-event-store-data:
  postgres-command-data:
  postgres-query-data:
  prometheus-data:
  grafana-data:

networks:
  elixir-cqrs-network:
    driver: bridge
