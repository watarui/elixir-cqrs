syntax = "proto3";

package query;

// 基本的なメッセージ

message Category {
  string id = 1;
  string name = 2;
  int64 created_at = 3;
  int64 updated_at = 4;
}

message Product {
  string id = 1;
  string name = 2;
  double price = 3;
  string category_id = 4;
  Category category = 5;
  int64 created_at = 6;
  int64 updated_at = 7;
}

// Request メッセージ

message CategoryQueryRequest {
  string id = 1;
}

message CategoryByNameRequest {
  string name = 1;
}

message CategorySearchRequest {
  string search_term = 1;
}

message CategoryPaginationRequest {
  int32 page = 1;
  int32 per_page = 2;
}

message CategoryIdsRequest {
  repeated string ids = 1;
}

message CategoryExistsRequest {
  string id = 1;
}

message ProductQueryRequest {
  string id = 1;
}

message ProductByNameRequest {
  string name = 1;
}

message ProductSearchRequest {
  string search_term = 1;
}

message ProductByCategoryRequest {
  string category_id = 1;
}

message ProductPriceRangeRequest {
  double min_price = 1;
  double max_price = 2;
}

message ProductSortRequest {
  string sort_order = 1; // "asc" or "desc"
}

message ProductPaginationRequest {
  int32 page = 1;
  int32 per_page = 2;
}

message ProductIdsRequest {
  repeated string ids = 1;
}

message ProductExistsRequest {
  string id = 1;
}

message ProductAdvancedSearchRequest {
  string name = 1;
  string category_id = 2;
  double min_price = 3;
  double max_price = 4;
  string sort_by = 5;
  string sort_order = 6;
  int32 limit = 7;
  int32 offset = 8;
}

message CategoryProductStatisticsRequest {
  string category_id = 1;
}

// Response メッセージ

message CategoryQueryResponse {
  Category category = 1;
}

message CategoryListResponse {
  repeated Category categories = 1;
}

message CategoryStatisticsResponse {
  int32 total_count = 1;
  bool has_categories = 2;
  int32 categories_with_timestamps = 3;
}

message CategoryExistsResponse {
  bool exists = 1;
}

message ProductQueryResponse {
  Product product = 1;
}

message ProductListResponse {
  repeated Product products = 1;
}

message ProductStatisticsResponse {
  int32 total_count = 1;
  bool has_products = 2;
  double average_price = 3;
  double min_price = 4;
  double max_price = 5;
  int32 products_with_timestamps = 6;
}

message ProductExistsResponse {
  bool exists = 1;
}

message CategoryProductStatisticsResponse {
  string category_id = 1;
  int32 total_count = 2;
  bool has_products = 3;
  double average_price = 4;
  double min_price = 5;
  double max_price = 6;
}

message Empty {}

// Query Service 定義

service CategoryQuery {
  rpc GetCategory(CategoryQueryRequest) returns (CategoryQueryResponse);
  rpc GetCategoryByName(CategoryByNameRequest) returns (CategoryQueryResponse);
  rpc ListCategories(Empty) returns (CategoryListResponse);
  rpc SearchCategories(CategorySearchRequest) returns (CategoryListResponse);
  rpc ListCategoriesPaginated(CategoryPaginationRequest) returns (CategoryListResponse);
  rpc GetCategoryStatistics(Empty) returns (CategoryStatisticsResponse);
  rpc CategoryExists(CategoryExistsRequest) returns (CategoryExistsResponse);
  rpc GetCategoriesByIds(CategoryIdsRequest) returns (CategoryListResponse);
}

service ProductQuery {
  rpc GetProduct(ProductQueryRequest) returns (ProductQueryResponse);
  rpc GetProductWithCategory(ProductQueryRequest) returns (ProductQueryResponse);
  rpc GetProductByName(ProductByNameRequest) returns (ProductQueryResponse);
  rpc ListProducts(Empty) returns (ProductListResponse);
  rpc ListProductsWithCategories(Empty) returns (ProductListResponse);
  rpc GetProductsByCategory(ProductByCategoryRequest) returns (ProductListResponse);
  rpc SearchProducts(ProductSearchRequest) returns (ProductListResponse);
  rpc GetProductsByPriceRange(ProductPriceRangeRequest) returns (ProductListResponse);
  rpc ListProductsSortedByPrice(ProductSortRequest) returns (ProductListResponse);
  rpc ListProductsPaginated(ProductPaginationRequest) returns (ProductListResponse);
  rpc GetProductsByIds(ProductIdsRequest) returns (ProductListResponse);
  rpc SearchProductsAdvanced(ProductAdvancedSearchRequest) returns (ProductListResponse);
  rpc GetProductStatistics(Empty) returns (ProductStatisticsResponse);
  rpc GetCategoryProductStatistics(CategoryProductStatisticsRequest) returns (CategoryProductStatisticsResponse);
  rpc ProductExists(ProductExistsRequest) returns (ProductExistsResponse);
}