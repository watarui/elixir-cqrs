apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-service
  namespace: elixir-cqrs
  labels:
    app: client-service
    app.kubernetes.io/name: client-service
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: elixir-cqrs
spec:
  replicas: 2
  selector:
    matchLabels:
      app: client-service
  template:
    metadata:
      labels:
        app: client-service
        app.kubernetes.io/name: client-service
        app.kubernetes.io/component: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: client-service
        image: ghcr.io/elixir-cqrs/client-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 4000
          protocol: TCP
        env:
        - name: PORT
          value: "4000"
        - name: MIX_ENV
          value: prod
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: query-db-url
        - name: SECRET_KEY_BASE
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: secret-key-base
        - name: COMMAND_SERVICE_HOST
          value: command-service
        - name: COMMAND_SERVICE_PORT
          value: "50051"
        - name: QUERY_SERVICE_HOST
          value: query-service
        - name: QUERY_SERVICE_PORT
          value: "50052"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://jaeger-collector:4317"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: client-service
  namespace: elixir-cqrs
  labels:
    app: client-service
    app.kubernetes.io/name: client-service
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  ports:
  - port: 4000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: client-service
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: client-service-hpa
  namespace: elixir-cqrs
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: client-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80